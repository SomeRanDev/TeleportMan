[{
	access: []
	doc: null
	kind: FVar(TPath({
		name: Ptr
		pack: []
		params: [TPType(TPath({
			name: Camera3D
			pack: []
			params: []
			sub: null
		}))]
		sub: null
	}), null)
	meta: [{
		name: :getNode
		params: [{
			expr: EConst(CString(CameraController/Camera3D, DoubleQuotes))
			pos: #pos
		}]
		pos: #pos
	}]
	name: camera
	pos: #pos
}, {
	access: []
	doc: null
	kind: FVar(TPath({
		name: Float
		pack: []
		params: []
		sub: null
	}), null)
	meta: []
	name: gravity
	pos: #pos
}, {
	access: []
	doc: null
	kind: FVar(TPath({
		name: Vector3
		pack: []
		params: []
		sub: null
	}), null)
	meta: []
	name: mouseRotation
	pos: #pos
}, {
	access: []
	doc: null
	kind: FVar(TPath({
		name: Float
		pack: []
		params: []
		sub: null
	}), null)
	meta: []
	name: rotationInput
	pos: #pos
}, {
	access: []
	doc: null
	kind: FVar(TPath({
		name: Float
		pack: []
		params: []
		sub: null
	}), null)
	meta: []
	name: tiltInput
	pos: #pos
}, {
	access: []
	doc: null
	kind: FVar(TPath({
		name: Vector3
		pack: []
		params: []
		sub: null
	}), null)
	meta: []
	name: lastPosition
	pos: #pos
}, {
	access: [APublic, AOverride]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EBlock([{
					expr: EBinop(OpAssign, {
						expr: EConst(CIdent(camera))
						pos: #pos
					}, {
						expr: ECast({
							expr: ECall({
								expr: EConst(CIdent(get_node))
								pos: #pos
							}, [{
								expr: EConst(CString(CameraController/Camera3D, DoubleQuotes))
								pos: #pos
							}])
							pos: #pos
						}, TPath({
							name: Ptr
							pack: []
							params: [TPType(TPath({
								name: Ptr
								pack: []
								params: [TPType(TPath({
									name: Camera3D
									pack: []
									params: []
									sub: null
								}))]
								sub: null
							}))]
							sub: null
						}))
						pos: #pos
					})
					pos: #pos
				}])
				pos: #pos
			}, {
				expr: EMeta({
					name: :mergeBlock
					params: []
					pos: #pos
				}, {
					expr: EBlock([{
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(Input))
								pos: #pos
							}, init, Normal)
							pos: #pos
						}, [])
						pos: #pos
					}])
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: []
	name: _ready
	pos: #pos
}, {
	access: [APublic, AOverride]
	doc: null
	kind: FFun({
		args: [{
			meta: []
			name: event
			opt: false
			type: TPath({
				name: Ptr
				pack: []
				params: [TPType(TPath({
					name: InputEvent
					pack: []
					params: []
					sub: null
				}))]
				sub: null
			})
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: ESwitch({
					expr: EParenthesis({
						expr: ECall({
							expr: EField({
								expr: ECall({
									expr: EField({
										expr: EConst(CIdent(event))
										pos: #pos
									}, get_class, Normal)
									pos: #pos
								}, [])
								pos: #pos
							}, toString, Normal)
							pos: #pos
						}, [])
						pos: #pos
					})
					pos: #pos
				}, [{
					expr: {
						expr: EBlock([{
							expr: EBlock([{
								expr: EVars([{
									expr: {
										expr: ECall({
											expr: EField({
												expr: EConst(CIdent(event))
												pos: #pos
											}, StaticCast, Normal)
											pos: #pos
										}, [{
											expr: EConst(CIdent(InputEventKey))
											pos: #pos
										}])
										pos: #pos
									}
									isFinal: true
									isStatic: false
									meta: []
									name: keyEvent
									namePos: #pos
									type: TPath({
										name: Ptr
										pack: []
										params: [TPType(TPath({
											name: InputEventKey
											pack: []
											params: []
											sub: null
										}))]
										sub: null
									})
								}])
								pos: #pos
							}, {
								expr: EIf({
									expr: EBinop(OpEq, {
										expr: ECall({
											expr: EField({
												expr: EConst(CIdent(keyEvent))
												pos: #pos
											}, get_keycode, Normal)
											pos: #pos
										}, [])
										pos: #pos
									}, {
										expr: EConst(CIdent(KEY_ESCAPE))
										pos: #pos
									})
									pos: #pos
								}, {
									expr: EBlock([{
										expr: ECall({
											expr: EField({
												expr: EConst(CIdent(Input))
												pos: #pos
											}, setMouseCaptured, Normal)
											pos: #pos
										}, [{
											expr: EConst(CIdent(false))
											pos: #pos
										}])
										pos: #pos
									}])
									pos: #pos
								}, null)
								pos: #pos
							}])
							pos: #pos
						}])
						pos: #pos
					}
					guard: null
					values: [{
						expr: EConst(CString(InputEventKey, DoubleQuotes))
						pos: #pos
					}]
				}, {
					expr: {
						expr: EBlock([{
							expr: EBlock([{
								expr: EVars([{
									expr: {
										expr: ECall({
											expr: EField({
												expr: EConst(CIdent(event))
												pos: #pos
											}, StaticCast, Normal)
											pos: #pos
										}, [{
											expr: EConst(CIdent(InputEventMouseMotion))
											pos: #pos
										}])
										pos: #pos
									}
									isFinal: true
									isStatic: false
									meta: []
									name: mouseMotionEvent
									namePos: #pos
									type: TPath({
										name: Ptr
										pack: []
										params: [TPType(TPath({
											name: InputEventMouseMotion
											pack: []
											params: []
											sub: null
										}))]
										sub: null
									})
								}])
								pos: #pos
							}, {
								expr: EBinop(OpAssignOp(OpAdd), {
									expr: EConst(CIdent(rotationInput))
									pos: #pos
								}, {
									expr: EBinop(OpMult, {
										expr: EUnop(OpNeg, false, {
											expr: EField({
												expr: ECall({
													expr: EField({
														expr: EConst(CIdent(mouseMotionEvent))
														pos: #pos
													}, get_relative, Normal)
													pos: #pos
												}, [])
												pos: #pos
											}, x, Normal)
											pos: #pos
										})
										pos: #pos
									}, {
										expr: EConst(CFloat(0.1, null))
										pos: #pos
									})
									pos: #pos
								})
								pos: #pos
							}, {
								expr: EBinop(OpAssignOp(OpAdd), {
									expr: EConst(CIdent(tiltInput))
									pos: #pos
								}, {
									expr: EBinop(OpMult, {
										expr: EUnop(OpNeg, false, {
											expr: EField({
												expr: ECall({
													expr: EField({
														expr: EConst(CIdent(mouseMotionEvent))
														pos: #pos
													}, get_relative, Normal)
													pos: #pos
												}, [])
												pos: #pos
											}, y, Normal)
											pos: #pos
										})
										pos: #pos
									}, {
										expr: EConst(CFloat(0.1, null))
										pos: #pos
									})
									pos: #pos
								})
								pos: #pos
							}])
							pos: #pos
						}])
						pos: #pos
					}
					guard: {
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(Input))
								pos: #pos
							}, getIsMouseCaptured, Normal)
							pos: #pos
						}, [])
						pos: #pos
					}
					values: [{
						expr: EConst(CString(InputEventMouseMotion, DoubleQuotes))
						pos: #pos
					}]
				}, {
					expr: {
						expr: EBlock([{
							expr: EBlock([{
								expr: EVars([{
									expr: {
										expr: ECall({
											expr: EField({
												expr: EConst(CIdent(event))
												pos: #pos
											}, StaticCast, Normal)
											pos: #pos
										}, [{
											expr: EConst(CIdent(InputEventMouseButton))
											pos: #pos
										}])
										pos: #pos
									}
									isFinal: true
									isStatic: false
									meta: []
									name: buttonEvent
									namePos: #pos
									type: TPath({
										name: Ptr
										pack: []
										params: [TPType(TPath({
											name: InputEventMouseButton
											pack: []
											params: []
											sub: null
										}))]
										sub: null
									})
								}])
								pos: #pos
							}, {
								expr: EIf({
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(buttonEvent))
											pos: #pos
										}, is_pressed, Normal)
										pos: #pos
									}, [])
									pos: #pos
								}, {
									expr: EBlock([{
										expr: EIf({
											expr: EBinop(OpEq, {
												expr: ECall({
													expr: EField({
														expr: EConst(CIdent(buttonEvent))
														pos: #pos
													}, get_button_index, Normal)
													pos: #pos
												}, [])
												pos: #pos
											}, {
												expr: EConst(CIdent(MOUSE_BUTTON_LEFT))
												pos: #pos
											})
											pos: #pos
										}, {
											expr: EBlock([{
												expr: ECall({
													expr: EField({
														expr: EConst(CIdent(Input))
														pos: #pos
													}, setMouseCaptured, Normal)
													pos: #pos
												}, [{
													expr: EConst(CIdent(true))
													pos: #pos
												}])
												pos: #pos
											}])
											pos: #pos
										}, null)
										pos: #pos
									}])
									pos: #pos
								}, null)
								pos: #pos
							}])
							pos: #pos
						}])
						pos: #pos
					}
					guard: {
						expr: EUnop(OpNot, false, {
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(Input))
									pos: #pos
								}, getIsMouseCaptured, Normal)
								pos: #pos
							}, [])
							pos: #pos
						})
						pos: #pos
					}
					values: [{
						expr: EConst(CString(InputEventMouseButton, DoubleQuotes))
						pos: #pos
					}]
				}], null)
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: []
	name: _unhandled_input
	pos: #pos
}, {
	access: [APublic, AOverride]
	doc: null
	kind: FFun({
		args: [{
			meta: []
			name: delta
			opt: false
			type: TPath({
				name: Float
				pack: []
				params: []
				sub: null
			})
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(Input))
						pos: #pos
					}, update, Normal)
					pos: #pos
				}, [])
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: []
	name: _process
	pos: #pos
}, {
	access: [APublic, AOverride]
	doc: null
	kind: FFun({
		args: [{
			meta: []
			name: delta
			opt: false
			type: TPath({
				name: Float
				pack: []
				params: []
				sub: null
			})
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: EVars([{
					expr: {
						expr: ECall({
							expr: EConst(CIdent(get_velocity))
							pos: #pos
						}, [])
						pos: #pos
					}
					isFinal: true
					isStatic: false
					meta: []
					name: velocity
					namePos: #pos
					type: null
				}])
				pos: #pos
			}, {
				expr: EIf({
					expr: EUnop(OpNot, false, {
						expr: ECall({
							expr: EConst(CIdent(is_on_floor))
							pos: #pos
						}, [])
						pos: #pos
					})
					pos: #pos
				}, {
					expr: EBlock([{
						expr: EBinop(OpAssignOp(OpSub), {
							expr: EField({
								expr: EConst(CIdent(velocity))
								pos: #pos
							}, y, Normal)
							pos: #pos
						}, {
							expr: EBinop(OpMult, {
								expr: EConst(CIdent(gravity))
								pos: #pos
							}, {
								expr: EConst(CIdent(delta))
								pos: #pos
							})
							pos: #pos
						})
						pos: #pos
					}])
					pos: #pos
				}, null)
				pos: #pos
			}, {
				expr: ECall({
					expr: EConst(CIdent(updateCamera))
					pos: #pos
				}, [{
					expr: EConst(CIdent(delta))
					pos: #pos
				}])
				pos: #pos
			}, {
				expr: EIf({
					expr: EBinop(OpBoolAnd, {
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(Input))
								pos: #pos
							}, isJumpJustPressed, Normal)
							pos: #pos
						}, [])
						pos: #pos
					}, {
						expr: ECall({
							expr: EConst(CIdent(is_on_floor))
							pos: #pos
						}, [])
						pos: #pos
					})
					pos: #pos
				}, {
					expr: EBlock([{
						expr: EBinop(OpAssign, {
							expr: EField({
								expr: EConst(CIdent(velocity))
								pos: #pos
							}, y, Normal)
							pos: #pos
						}, {
							expr: EConst(CFloat(7.0, null))
							pos: #pos
						})
						pos: #pos
					}])
					pos: #pos
				}, null)
				pos: #pos
			}, {
				expr: EVars([{
					expr: {
						expr: ECall({
							expr: EField({
								expr: ENew({
									name: Vector2
									pack: []
									params: []
									sub: null
								}, [{
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(Input))
											pos: #pos
										}, getMoveXAxis, Normal)
										pos: #pos
									}, [{
										expr: EConst(CIdent(delta))
										pos: #pos
									}])
									pos: #pos
								}, {
									expr: EUnop(OpNeg, false, {
										expr: ECall({
											expr: EField({
												expr: EConst(CIdent(Input))
												pos: #pos
											}, getMoveYAxis, Normal)
											pos: #pos
										}, [{
											expr: EConst(CIdent(delta))
											pos: #pos
										}])
										pos: #pos
									})
									pos: #pos
								}])
								pos: #pos
							}, normalized, Normal)
							pos: #pos
						}, [])
						pos: #pos
					}
					isFinal: true
					isStatic: false
					meta: []
					name: inputDir
					namePos: #pos
					type: null
				}])
				pos: #pos
			}, {
				expr: EVars([{
					expr: {
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(inputDir))
								pos: #pos
							}, rotated, Normal)
							pos: #pos
						}, [{
							expr: EUnop(OpNeg, false, {
								expr: EField({
									expr: EConst(CIdent(mouseRotation))
									pos: #pos
								}, y, Normal)
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}
					isFinal: true
					isStatic: false
					meta: []
					name: direction
					namePos: #pos
					type: null
				}])
				pos: #pos
			}, {
				expr: EVars([{
					expr: {
						expr: EConst(CFloat(5.0, null))
						pos: #pos
					}
					isFinal: true
					isStatic: false
					meta: []
					name: SPEED
					namePos: #pos
					type: null
				}])
				pos: #pos
			}, {
				expr: EVars([{
					expr: {
						expr: ETernary({
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(godot))
										pos: #pos
									}, Input, Normal)
									pos: #pos
								}, is_key_pressed, Normal)
								pos: #pos
							}, [{
								expr: EConst(CIdent(KEY_SHIFT))
								pos: #pos
							}])
							pos: #pos
						}, {
							expr: EParenthesis({
								expr: EBinop(OpMult, {
									expr: EConst(CIdent(SPEED))
									pos: #pos
								}, {
									expr: EConst(CFloat(5.0, null))
									pos: #pos
								})
								pos: #pos
							})
							pos: #pos
						}, {
							expr: EConst(CIdent(SPEED))
							pos: #pos
						})
						pos: #pos
					}
					isFinal: true
					isStatic: false
					meta: []
					name: moveSpeed
					namePos: #pos
					type: null
				}])
				pos: #pos
			}, {
				expr: EIf({
					expr: EUnop(OpNot, false, {
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(direction))
								pos: #pos
							}, is_zero_approx, Normal)
							pos: #pos
						}, [])
						pos: #pos
					})
					pos: #pos
				}, {
					expr: EBlock([{
						expr: EBinop(OpAssign, {
							expr: EField({
								expr: EConst(CIdent(velocity))
								pos: #pos
							}, x, Normal)
							pos: #pos
						}, {
							expr: EBinop(OpMult, {
								expr: EField({
									expr: EConst(CIdent(direction))
									pos: #pos
								}, x, Normal)
								pos: #pos
							}, {
								expr: EConst(CIdent(moveSpeed))
								pos: #pos
							})
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBinop(OpAssign, {
							expr: EField({
								expr: EConst(CIdent(velocity))
								pos: #pos
							}, z, Normal)
							pos: #pos
						}, {
							expr: EBinop(OpMult, {
								expr: EField({
									expr: EConst(CIdent(direction))
									pos: #pos
								}, y, Normal)
								pos: #pos
							}, {
								expr: EConst(CIdent(moveSpeed))
								pos: #pos
							})
							pos: #pos
						})
						pos: #pos
					}])
					pos: #pos
				}, {
					expr: EBlock([{
						expr: EBinop(OpAssign, {
							expr: EField({
								expr: EConst(CIdent(velocity))
								pos: #pos
							}, x, Normal)
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(Godot))
									pos: #pos
								}, move_toward, Normal)
								pos: #pos
							}, [{
								expr: EField({
									expr: EConst(CIdent(velocity))
									pos: #pos
								}, x, Normal)
								pos: #pos
							}, {
								expr: EConst(CFloat(0.0, null))
								pos: #pos
							}, {
								expr: EConst(CIdent(moveSpeed))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBinop(OpAssign, {
							expr: EField({
								expr: EConst(CIdent(velocity))
								pos: #pos
							}, z, Normal)
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(Godot))
									pos: #pos
								}, move_toward, Normal)
								pos: #pos
							}, [{
								expr: EField({
									expr: EConst(CIdent(velocity))
									pos: #pos
								}, z, Normal)
								pos: #pos
							}, {
								expr: EConst(CFloat(0.0, null))
								pos: #pos
							}, {
								expr: EConst(CIdent(moveSpeed))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}])
					pos: #pos
				})
				pos: #pos
			}, {
				expr: ECall({
					expr: EConst(CIdent(set_velocity))
					pos: #pos
				}, [{
					expr: EConst(CIdent(velocity))
					pos: #pos
				}])
				pos: #pos
			}, {
				expr: ECall({
					expr: EConst(CIdent(move_and_slide))
					pos: #pos
				}, [])
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: []
	name: _physics_process
	pos: #pos
}, {
	access: []
	doc: null
	kind: FFun({
		args: [{
			meta: []
			name: delta
			opt: false
			type: TPath({
				name: Float
				pack: []
				params: []
				sub: null
			})
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: EBinop(OpAssignOp(OpAdd), {
					expr: EField({
						expr: EConst(CIdent(mouse_rotation))
						pos: #pos
					}, x, Normal)
					pos: #pos
				}, {
					expr: EBinop(OpMult, {
						expr: EConst(CIdent(tiltInput))
						pos: #pos
					}, {
						expr: EConst(CIdent(delta))
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}, {
				expr: EBinop(OpAssign, {
					expr: EField({
						expr: EConst(CIdent(mouse_rotation))
						pos: #pos
					}, x, Normal)
					pos: #pos
				}, {
					expr: ECall({
						expr: EField({
							expr: EField({
								expr: EConst(CIdent(mouse_rotation))
								pos: #pos
							}, x, Normal)
							pos: #pos
						}, clamp, Normal)
						pos: #pos
					}, [{
						expr: EUnop(OpNeg, false, {
							expr: ECall({
								expr: EField({
									expr: EConst(CFloat(90.0, f32))
									pos: #pos
								}, to_radians, Normal)
								pos: #pos
							}, [])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: ECall({
							expr: EField({
								expr: EConst(CFloat(90.0, f32))
								pos: #pos
							}, to_radians, Normal)
							pos: #pos
						}, [])
						pos: #pos
					}])
					pos: #pos
				})
				pos: #pos
			}, {
				expr: EBinop(OpAssignOp(OpAdd), {
					expr: EField({
						expr: EConst(CIdent(mouse_rotation))
						pos: #pos
					}, y, Normal)
					pos: #pos
				}, {
					expr: EBinop(OpMult, {
						expr: EConst(CIdent(rotationInput))
						pos: #pos
					}, {
						expr: EConst(CIdent(delta))
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}, {
				expr: EVars([{
					expr: {
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(camera))
								pos: #pos
							}, get_transform, Normal)
							pos: #pos
						}, [])
						pos: #pos
					}
					isFinal: true
					isStatic: false
					meta: []
					name: transform
					namePos: #pos
					type: null
				}])
				pos: #pos
			}, {
				expr: EBinop(OpAssign, {
					expr: EField({
						expr: EConst(CIdent(transform))
						pos: #pos
					}, basis, Normal)
					pos: #pos
				}, {
					expr: ENew({
						name: Basis
						pack: [godot]
						params: []
						sub: null
					}, [{
						expr: EConst(CIdent(EULER_ORDER_YXZ))
						pos: #pos
					}, {
						expr: EConst(CIdent(mouse_rotation))
						pos: #pos
					}])
					pos: #pos
				})
				pos: #pos
			}, {
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(camera))
						pos: #pos
					}, set_transform, Normal)
					pos: #pos
				}, [{
					expr: EConst(CIdent(transform))
					pos: #pos
				}])
				pos: #pos
			}, {
				expr: EVars([{
					expr: {
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(camera))
								pos: #pos
							}, get_rotation, Normal)
							pos: #pos
						}, [])
						pos: #pos
					}
					isFinal: true
					isStatic: false
					meta: []
					name: rotation
					namePos: #pos
					type: null
				}])
				pos: #pos
			}, {
				expr: EBinop(OpAssign, {
					expr: EField({
						expr: EConst(CIdent(rotation))
						pos: #pos
					}, z, Normal)
					pos: #pos
				}, {
					expr: EConst(CFloat(0.0, null))
					pos: #pos
				})
				pos: #pos
			}, {
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(camera))
						pos: #pos
					}, set_rotation, Normal)
					pos: #pos
				}, [{
					expr: EConst(CIdent(rotation))
					pos: #pos
				}])
				pos: #pos
			}, {
				expr: EBinop(OpAssign, {
					expr: EConst(CIdent(rotationInput))
					pos: #pos
				}, {
					expr: EConst(CFloat(0.0, null))
					pos: #pos
				})
				pos: #pos
			}, {
				expr: EBinop(OpAssign, {
					expr: EConst(CIdent(tiltInput))
					pos: #pos
				}, {
					expr: EConst(CFloat(0.0, null))
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: []
	name: updateCamera
	pos: #pos
}]